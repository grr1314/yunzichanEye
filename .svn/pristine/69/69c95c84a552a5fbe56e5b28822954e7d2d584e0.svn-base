package com.zchk.yunzichan.ui.activity.diector;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.zchk.yunzichan.R;
import com.zchk.yunzichan.application.MyApplication;
import com.zchk.yunzichan.entity.model.Diector;
import com.zchk.yunzichan.entity.model.RequestAndResponse;
import com.zchk.yunzichan.entity.model.check.CheckTemplateMessage;
import com.zchk.yunzichan.ui.activity.BaseActivity;
import com.zchk.yunzichan.ui.view.sortlistview.CharacterParser;
import com.zchk.yunzichan.ui.view.sortlistview.ClearEditText;
import com.zchk.yunzichan.ui.view.sortlistview.PinyinComparator;
import com.zchk.yunzichan.ui.view.sortlistview.SideBar;
import com.zchk.yunzichan.ui.view.sortlistview.SortAdapter;
import com.zchk.yunzichan.ui.view.sortlistview.SortModel;
import com.zchk.yunzichan.utils.GlobalDefine;
import com.zchk.yunzichan.utils.JsonTools;
import com.zhy.http.okhttp.callback.StringCallback;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import okhttp3.Call;
import okhttp3.Request;

/**
 * Created by admin on 2016/11/16.
 */
public class Diector_Activity extends BaseActivity {
    private static final String TAG = "Diector_Activity";
    //IP地址
    private String url = GlobalDefine.CmdPath.cmdPath + "APPDirectoriesReadCmd";
    private ListView sortListView;
    private SideBar sideBar;
    private TextView dialog;
    private SortAdapter adapter;
    private ClearEditText mClearEditText;

    private String[] arrays;
    private String[] numbers;
    private String[] roles;

    /**
     * 汉字转换成拼音的类
     */
    private CharacterParser characterParser;
    private List<SortModel> SourceDateList;

    /**
     * 根据拼音来排列ListView里面的数据类
     */
    private PinyinComparator pinyinComparator;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.diector_activity);
        initViews();
    }

    private void initViews() {
        initTopBar("通讯录", true, false, true);
        initTopBarListener(null, null, new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                finish();
            }
        });
        //实例化汉字转拼音类
        characterParser = CharacterParser.getInstance();

        pinyinComparator = new PinyinComparator();

        sideBar = (SideBar) findViewById(R.id.sidrbar);
        dialog = (TextView) findViewById(R.id.dialog);
        sideBar.setTextView(dialog);

        //设置右侧触摸监听
        sideBar.setOnTouchingLetterChangedListener(new SideBar.OnTouchingLetterChangedListener() {

            @Override
            public void onTouchingLetterChanged(String s) {
                //该字母首次出现的位置
                int position = adapter.getPositionForSection(s.charAt(0));
                if (position != -1) {
                    sortListView.setSelection(position);
                }

            }
        });

        sortListView = (ListView) findViewById(R.id.country_lvcountry);
        sortListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                //这里要利用adapter.getItem(position)来获取当前position所对应的对象
                Toast.makeText(getApplication(), ((SortModel) adapter.getItem(position)).getName(), Toast.LENGTH_SHORT).show();

                Intent intent=new Intent();
                intent.setClass(Diector_Activity.this,DiectorDetailActivity.class);
                intent.putExtra("data",((SortModel) adapter.getItem(position)).getName());
                intent.putExtra("number",((SortModel) adapter.getItem(position)).getNumber());
                intent.putExtra("role",((SortModel) adapter.getItem(position)).getRole());
                startActivity(intent);
            }
        });

        //获取数据
        initData();
    }

    private void initData() {
        RequestAndResponse requestAndResponse = new RequestAndResponse();
        requestAndResponse.requestCommand = MyApplication.userInfo.getAccount();
        requestAndResponse.responseCommand = "";
        requestAndResponse.failReason = "";
        // 将数据打包成json字符串
        String param = JsonTools.StringToJson_diector(requestAndResponse);
        http(url, 1, param, new StringCallback() {
            @Override
            public void onAfter(int code) {
                super.onAfter(code);
                dialogDismiss();
            }

            @Override
            public void onBefore(Request request, int code) {
                super.onBefore(request, code);
                showDialog();
            }

            @Override
            public void onResponse(String response, int code) {
                Log.e(TAG, "第一:" + response);
                dealData(response);
            }

            @Override
            public void onError(Call call, Exception e, int code) {
                showErrorPage();
            }
        });
    }

    private void dealData(String response) {
        Diector rar;
        // 首先返回的数据是空
        if (response.isEmpty() || response.equals("")) {
            showErrorPage();
            return;
        }
        // 解析数据
        rar = (Diector) JsonTools.JsonToStruts(
                response, Diector.class);

        if (rar == null) {
            Log.e(TAG, "null");
        }
        // 获取数据失败
        if (rar.resp.responseCommand.equals("Fail")) {
            showErrorPage();
            return;
        }
        if (rar.resp.responseCommand.equals("OK")) {
            if (rar.items == null || rar.items.length == 0) {
                return;
            }
            arrays=new String[rar.items.length];
            numbers=new String[rar.items.length];
            roles=new String[rar.items.length];
            for (int i = 0; i < rar.items.length; i++) {
                arrays[i] = rar.items[i].nameCn;
                numbers[i]=rar.items[i].telNumber;
                roles[i]=rar.items[i].roleCn;

            }
        }
        putData();
    }

    private void putData() {
        SourceDateList = filledData(arrays,numbers,roles);
        // 根据a-z进行排序源数据
        Collections.sort(SourceDateList, pinyinComparator);
        adapter = new SortAdapter(this, SourceDateList);
        sortListView.setAdapter(adapter);

        mClearEditText = (ClearEditText) findViewById(R.id.filter_edit);

        //根据输入框输入值的改变来过滤搜索
        mClearEditText.addTextChangedListener(new TextWatcher() {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                //当输入框里面的值为空，更新为原来的列表，否则为过滤数据列表
                filterData(s.toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count,
                                          int after) {

            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });
    }


    /**
     * 为ListView填充数据
     *
     * @param date
     * @return
     */
    private List<SortModel> filledData(String[] date,String[] numbers,String[] roles) {
        List<SortModel> mSortList = new ArrayList<SortModel>();

        for (int i = 0; i < date.length; i++) {
            SortModel sortModel = new SortModel();
            sortModel.setName(date[i]);
            sortModel.setNumber(numbers[i]);
            sortModel.setRole(roles[i]);
            //汉字转换成拼音
            String pinyin = characterParser.getSelling(date[i]);
            String sortString = pinyin.substring(0, 1).toUpperCase();

            // 正则表达式，判断首字母是否是英文字母
            if (sortString.matches("[A-Z]")) {
                sortModel.setSortLetters(sortString.toUpperCase());
            } else {
                sortModel.setSortLetters("#");
            }

            mSortList.add(sortModel);
        }
        return mSortList;

    }

    /**
     * 根据输入框中的值来过滤数据并更新ListView
     *
     * @param filterStr
     */
    private void filterData(String filterStr) {
        List<SortModel> filterDateList = new ArrayList<SortModel>();

        if (TextUtils.isEmpty(filterStr)) {
            filterDateList = SourceDateList;
        } else {
            filterDateList.clear();
            for (SortModel sortModel : SourceDateList) {
                String name = sortModel.getName();
                if (name.indexOf(filterStr.toString()) != -1 || characterParser.getSelling(name).startsWith(filterStr.toString())) {
                    filterDateList.add(sortModel);
                }
            }
        }

        // 根据a-z进行排序
        Collections.sort(filterDateList, pinyinComparator);
        adapter.updateListView(filterDateList);
    }
}
